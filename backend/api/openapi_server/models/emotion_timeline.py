# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.emotion_timeline_emotions import EmotionTimelineEmotions
from openapi_server import util

from openapi_server.models.emotion_timeline_emotions import EmotionTimelineEmotions  # noqa: E501

class EmotionTimeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, videoname=None, emotions=None):  # noqa: E501
        """EmotionTimeline - a model defined in OpenAPI

        :param videoname: The videoname of this EmotionTimeline.  # noqa: E501
        :type videoname: str
        :param emotions: The emotions of this EmotionTimeline.  # noqa: E501
        :type emotions: List[EmotionTimelineEmotions]
        """
        self.openapi_types = {
            'videoname': str,
            'emotions': List[EmotionTimelineEmotions]
        }

        self.attribute_map = {
            'videoname': 'videoname',
            'emotions': 'emotions'
        }

        self._videoname = videoname
        self._emotions = emotions

    @classmethod
    def from_dict(cls, dikt) -> 'EmotionTimeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Emotion_timeline of this EmotionTimeline.  # noqa: E501
        :rtype: EmotionTimeline
        """
        return util.deserialize_model(dikt, cls)

    @property
    def videoname(self):
        """Gets the videoname of this EmotionTimeline.


        :return: The videoname of this EmotionTimeline.
        :rtype: str
        """
        return self._videoname

    @videoname.setter
    def videoname(self, videoname):
        """Sets the videoname of this EmotionTimeline.


        :param videoname: The videoname of this EmotionTimeline.
        :type videoname: str
        """
        if videoname is None:
            raise ValueError("Invalid value for `videoname`, must not be `None`")  # noqa: E501

        self._videoname = videoname

    @property
    def emotions(self):
        """Gets the emotions of this EmotionTimeline.


        :return: The emotions of this EmotionTimeline.
        :rtype: List[EmotionTimelineEmotions]
        """
        return self._emotions

    @emotions.setter
    def emotions(self, emotions):
        """Sets the emotions of this EmotionTimeline.


        :param emotions: The emotions of this EmotionTimeline.
        :type emotions: List[EmotionTimelineEmotions]
        """
        if emotions is None:
            raise ValueError("Invalid value for `emotions`, must not be `None`")  # noqa: E501

        self._emotions = emotions
